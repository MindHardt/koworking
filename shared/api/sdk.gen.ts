// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { GetKoworkersMeData, GetKoworkersMeResponses, GetVacanciesByIdData, GetVacanciesByIdErrors, GetVacanciesByIdResponses, GetVacanciesData, GetVacanciesResponses, PostDevSeedData, PostDevSeedResponses, PostVacanciesData, PostVacanciesResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postDevSeed = <ThrowOnError extends boolean = false>(options?: Options<PostDevSeedData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDevSeedResponses, unknown, ThrowOnError>({
        url: '/dev/seed',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Получение данных текущего пользователя
 */
export const getKoworkersMe = <ThrowOnError extends boolean = false>(options?: Options<GetKoworkersMeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKoworkersMeResponses, unknown, ThrowOnError>({
        url: '/koworkers/me',
        ...options
    });
};

/**
 * Получение списка вакансий с поиском
 */
export const getVacancies = <ThrowOnError extends boolean = false>(options?: Options<GetVacanciesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetVacanciesResponses, unknown, ThrowOnError>({
        url: '/vacancies',
        ...options
    });
};

/**
 * Создание новой вакансии
 */
export const postVacancies = <ThrowOnError extends boolean = false>(options?: Options<PostVacanciesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostVacanciesResponses, unknown, ThrowOnError>({
        url: '/vacancies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Получение конкретной вакансии
 */
export const getVacanciesById = <ThrowOnError extends boolean = false>(options: Options<GetVacanciesByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVacanciesByIdResponses, GetVacanciesByIdErrors, ThrowOnError>({
        url: '/vacancies/{Id}',
        ...options
    });
};
