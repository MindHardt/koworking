// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

/**
 * AddVisitRequest
 */
export const zAddVisitRequest = z.object({
    location: z.string().default('/vacancies'),
    utm_source: z.string().default('koworking'),
    utm_medium: z.string().default('copy_link'),
    utm_campaign: z.string().default('referral'),
    utm_term: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    utm_content: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    userAgent: z.optional(z.union([
        z.string().default('scalar'),
        z.null()
    ])).default('scalar')
});

/**
 * IFormFile
 */
export const zIFormFile = z.string();

/**
 * KoworkerModel
 */
export const zKoworkerModel = z.object({
    id: z.string(),
    avatarUrl: z.union([
        z.string(),
        z.null()
    ])
});

/**
 * PaycheckPeriod
 */
export const zPaycheckPeriod = z.enum([
    'Hourly',
    'Daily',
    'Weekly',
    'Monthly',
    'Yearly'
]);

/**
 * PaycheckType
 */
export const zPaycheckType = z.enum([
    'Net',
    'Gross'
]);

/**
 * Paycheck
 */
export const zPaycheck = z.union([
    z.object({
        amount: z.int(),
        period: zPaycheckPeriod,
        type: zPaycheckType
    }),
    z.null()
]);

/**
 * CreateVacancyRequest
 */
export const zCreateVacancyRequest = z.object({
    title: z.string(),
    location: z.string(),
    description: z.string(),
    conditions: z.string(),
    expectations: z.string(),
    imageUrl: z.union([
        z.string(),
        z.null()
    ]),
    paycheck: zPaycheck
});

/**
 * UploadScope
 */
export const zUploadScope = z.enum([
    'Attachment',
    'Avatar',
    'Admin'
]);

/**
 * MigrateUploadRequest
 */
export const zMigrateUploadRequest = z.object({
    url: z.url(),
    scope: zUploadScope
});

/**
 * UploadModel
 */
export const zUploadModel = z.object({
    id: z.string(),
    uploaderId: z.string(),
    hash: z.string(),
    contentType: z.string(),
    fileName: z.string(),
    fileSize: z.coerce.bigint(),
    uploadTime: z.iso.datetime(),
    scope: zUploadScope
});

/**
 * PaginatedResponseOfUploadModel
 */
export const zPaginatedResponseOfUploadModel = z.object({
    total: z.int(),
    offset: z.int(),
    limit: z.int(),
    data: z.array(zUploadModel)
});

/**
 * VacancyModel
 */
export const zVacancyModel = z.object({
    id: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    title: z.string(),
    location: z.string(),
    description: z.string(),
    conditions: z.string(),
    expectations: z.string(),
    imageUrl: z.union([
        z.string(),
        z.null()
    ]),
    paycheck: zPaycheck
});

/**
 * PaginatedResponseOfVacancyModel
 */
export const zPaginatedResponseOfVacancyModel = z.object({
    total: z.int(),
    offset: z.int(),
    limit: z.int(),
    data: z.array(zVacancyModel)
});

export const zPostDevSeedData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        Vacancies: z.optional(z.int())
    }))
});

export const zDeleteUploadsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        Id: z.string()
    }),
    query: z.optional(z.never())
});

export const zGetUploadsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        Id: z.string()
    }),
    query: z.optional(z.never())
});

export const zGetUploadsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        Scope: z.optional(z.enum([
            'Attachment',
            'Avatar',
            'Admin'
        ])),
        Query: z.optional(z.string()),
        Offset: z.optional(z.int()).default(0),
        Limit: z.optional(z.int()).default(10)
    }))
});

/**
 * OK
 */
export const zGetUploadsResponse = zPaginatedResponseOfUploadModel;

export const zPostUploadsData = z.object({
    body: z.object({
        File: zIFormFile
    }).and(z.object({
        Scope: zUploadScope
    })),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zPostUploadsResponse = zUploadModel;

export const zPostUploadsMigrateData = z.object({
    body: z.optional(zMigrateUploadRequest),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zPostUploadsMigrateResponse = zUploadModel;

export const zGetKoworkersMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetKoworkersMeResponse = zKoworkerModel;

export const zGetVacanciesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        Search: z.optional(z.string()),
        Offset: z.optional(z.int()).default(0),
        Limit: z.optional(z.int()).default(10)
    }))
});

/**
 * OK
 */
export const zGetVacanciesResponse = zPaginatedResponseOfVacancyModel;

export const zPostVacanciesData = z.object({
    body: z.optional(zCreateVacancyRequest),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zPostVacanciesResponse = zVacancyModel;

export const zGetVacanciesByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        Id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetVacanciesByIdResponse = zVacancyModel;

export const zPostVisitsData = z.object({
    body: z.optional(zAddVisitRequest),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});
