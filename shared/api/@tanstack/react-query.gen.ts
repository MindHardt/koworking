// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { getDevSeed, getVacancies, getVacanciesById, type Options } from '../sdk.gen';
import type { GetDevSeedData, GetVacanciesByIdData, GetVacanciesData } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getDevSeedQueryKey = (options?: Options<GetDevSeedData>) => createQueryKey('getDevSeed', options);

export const getDevSeedOptions = (options?: Options<GetDevSeedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDevSeed({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDevSeedQueryKey(options)
    });
};

export const getVacanciesQueryKey = (options?: Options<GetVacanciesData>) => createQueryKey('getVacancies', options);

/**
 * Получение списка вакансий с поиском
 */
export const getVacanciesOptions = (options?: Options<GetVacanciesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVacancies({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getVacanciesQueryKey(options)
    });
};

export const getVacanciesByIdQueryKey = (options: Options<GetVacanciesByIdData>) => createQueryKey('getVacanciesById', options);

/**
 * Получение конкретной вакансии
 */
export const getVacanciesByIdOptions = (options: Options<GetVacanciesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getVacanciesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getVacanciesByIdQueryKey(options)
    });
};
