/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as VacanciesIndexRouteImport } from './routes/vacancies/index'
import { Route as VacanciesIdRouteImport } from './routes/vacancies/$id'
import { Route as ApiSplatRouteImport } from './routes/api.$'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const VacanciesIndexRoute = VacanciesIndexRouteImport.update({
  id: '/vacancies/',
  path: '/vacancies/',
  getParentRoute: () => rootRouteImport,
} as any)
const VacanciesIdRoute = VacanciesIdRouteImport.update({
  id: '/vacancies/$id',
  path: '/vacancies/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSplatRoute = ApiSplatRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api/$': typeof ApiSplatRoute
  '/vacancies/$id': typeof VacanciesIdRoute
  '/vacancies': typeof VacanciesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/$': typeof ApiSplatRoute
  '/vacancies/$id': typeof VacanciesIdRoute
  '/vacancies': typeof VacanciesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api/$': typeof ApiSplatRoute
  '/vacancies/$id': typeof VacanciesIdRoute
  '/vacancies/': typeof VacanciesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/api/$' | '/vacancies/$id' | '/vacancies'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/api/$' | '/vacancies/$id' | '/vacancies'
  id: '__root__' | '/' | '/api/$' | '/vacancies/$id' | '/vacancies/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiSplatRoute: typeof ApiSplatRoute
  VacanciesIdRoute: typeof VacanciesIdRoute
  VacanciesIndexRoute: typeof VacanciesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vacancies/': {
      id: '/vacancies/'
      path: '/vacancies'
      fullPath: '/vacancies'
      preLoaderRoute: typeof VacanciesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vacancies/$id': {
      id: '/vacancies/$id'
      path: '/vacancies/$id'
      fullPath: '/vacancies/$id'
      preLoaderRoute: typeof VacanciesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiSplatRoute: ApiSplatRoute,
  VacanciesIdRoute: VacanciesIdRoute,
  VacanciesIndexRoute: VacanciesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
