// <auto-generated />
using System;
using Koworking.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Koworking.Api.Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251022133847_AddedMoreVacancyFields")]
    partial class AddedMoreVacancyFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Koworking.Api.Features.Users.Koworker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("KeycloakId")
                        .HasColumnType("uuid")
                        .HasColumnName("keycloak_id");

                    b.HasKey("Id")
                        .HasName("pk_koworkers");

                    b.HasIndex("KeycloakId")
                        .IsUnique()
                        .HasDatabaseName("ix_koworkers_keycloak_id");

                    b.ToTable("koworkers", (string)null);
                });

            modelBuilder.Entity("Koworking.Api.Features.Vacancies.Vacancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("conditions");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Expectations")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("expectations");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<NpgsqlTsVector>("TsVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("ts_vector")
                        .HasComputedColumnSql("gen_vacancy_vector(title, array [description, conditions, expectations])", true);

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_vacancies");

                    b.HasIndex("TsVector")
                        .HasDatabaseName("ix_vacancies_ts_vector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TsVector"), "GIN");

                    b.ToTable("vacancies", (string)null);
                });

            modelBuilder.Entity("Koworking.Api.Features.Vacancies.Vacancy", b =>
                {
                    b.OwnsOne("Koworking.Api.Features.Vacancies.Paycheck", "Paycheck", b1 =>
                        {
                            b1.Property<long>("VacancyId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int>("Amount")
                                .HasColumnType("integer")
                                .HasColumnName("paycheck_amount");

                            b1.Property<short>("Period")
                                .HasColumnType("smallint")
                                .HasColumnName("paycheck_period");

                            b1.Property<short>("Type")
                                .HasColumnType("smallint")
                                .HasColumnName("paycheck_type");

                            b1.HasKey("VacancyId");

                            b1.ToTable("vacancies");

                            b1.WithOwner()
                                .HasForeignKey("VacancyId")
                                .HasConstraintName("fk_vacancies_vacancies_id");
                        });

                    b.Navigation("Paycheck");
                });
#pragma warning restore 612, 618
        }
    }
}
